[{"content":"C√≥mo detectar y mitigar ataques de fuerza bruta en SSH Los ataques de fuerza bruta son intentos repetidos de adivinar contrase√±as de usuarios en SSH.\nRevisar intentos de acceso 1 grep \u0026#34;Failed password\u0026#34; /var/log/auth.log Configurar fail2ban 1 2 3 sudo apt install fail2ban sudo systemctl enable fail2ban sudo systemctl start fail2ban Ajustar SSH Cambiar puerto por defecto Deshabilitar root login Usar claves en lugar de contrase√±as Estas medidas reducen significativamente el riesgo de ataques automatizados.\n","date":"2025-10-24T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/mitigar-fuerza-bruta-ssh/","title":"C√≥mo detectar y mitigar ataques de fuerza bruta en SSH"},{"content":"Monitoriza tus servidores con Prometheus y Grafana Prometheus y Grafana permiten visualizar m√©tricas clave de tus servidores.\nInstalar Prometheus 1 sudo apt install prometheus Instalar Grafana 1 2 3 sudo apt install grafana sudo systemctl enable grafana-server sudo systemctl start grafana-server Configurar dashboards Conectar Prometheus como datasource en Grafana Crear dashboards para CPU, memoria, tr√°fico de red Con esto podr√°s monitorizar tus servidores y anticiparte a problemas de rendimiento.\n","date":"2025-10-24T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/monitorizacion-prometheus-grafana/","title":"Monitoriza tus servidores con Prometheus y Grafana"},{"content":"Docker para principiantes: contenedores desde cero Docker permite empaquetar aplicaciones y dependencias en contenedores ligeros.\nInstalar Docker 1 2 3 sudo apt install docker.io sudo systemctl enable docker sudo systemctl start docker Ejecutar un contenedor 1 docker run -it --name mi-contenedor ubuntu bash Crear una imagen propia 1 docker build -t mi-imagen . Gestionar contenedores 1 2 3 docker ps docker stop mi-contenedor docker rm mi-contenedor Con estos pasos b√°sicos, puedes empezar a usar Docker para simplificar despliegues y entornos de desarrollo.\n","date":"2025-10-23T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/docker-principiantes/","title":"Docker para principiantes: contenedores desde cero"},{"content":"Gesti√≥n segura de contrase√±as y autenticaci√≥n 2FA La seguridad empieza por contrase√±as fuertes y autenticaci√≥n adicional.\nUsa gestores de contrase√±as 1Password, Bitwarden, KeePass Configura 2FA siempre que sea posible Google Authenticator, Authy, YubiKey Evita reutilizar contrase√±as Cada cuenta debe tener credenciales √∫nicas Siguiendo estas pr√°cticas, mejorar√°s notablemente la seguridad de tus cuentas.\n","date":"2025-10-23T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/gestion-contrase%C3%B1as-2fa/","title":"Gesti√≥n segura de contrase√±as y autenticaci√≥n 2FA"},{"content":"Integraci√≥n de CI/CD con GitHub Actions en proyectos Hugo Automatiza el build y despliegue de tu blog Hugo usando GitHub Actions.\nCrear workflow 1 2 3 4 5 6 7 8 9 10 11 12 13 name: Build and Deploy Hugo on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 Ahora cada push construir√° y desplegar√° autom√°ticamente tu sitio.\n","date":"2025-10-22T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/ci-cd-github-actions/","title":"Integraci√≥n de CI/CD con GitHub Actions en proyectos Hugo"},{"content":"Optimizaci√≥n de sitios Hugo para SEO Para que tu blog sea encontrado f√°cilmente, sigue estas recomendaciones:\nT√≠tulos y meta description Usa t√≠tulos claros y descriptivos Incluye meta description √∫nicas por p√°gina URLs limpias Evita caracteres extra√±os Usa guiones en lugar de espacios Estructura de contenido Usa H1, H2, H3 correctamente Listas y subt√≠tulos para mejorar lectura Sitemap y robots.txt Hugo genera sitemap.xml autom√°ticamente Configura robots.txt para motores de b√∫squeda Siguiendo estas pr√°cticas, tu blog ser√° m√°s visible en Google y otros motores de b√∫squeda.\n","date":"2025-10-22T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/seo-hugo/","title":"Optimizaci√≥n de sitios Hugo para SEO"},{"content":"Automatiza tus tareas con Bash y Cron La automatizaci√≥n es clave para administrar servidores de forma eficiente.\nCrear un script Bash 1 2 3 #!/bin/bash echo \u0026#34;Backup de la base de datos iniciado\u0026#34; # comando de backup aqu√≠ Hacerlo ejecutable 1 chmod +x backup.sh Programar con Cron 1 crontab -e Agregar l√≠nea:\n1 0 2 * * * /ruta/a/backup.sh Ejecuta el script todos los d√≠as a las 2:00 AM Con Bash + Cron puedes automatizar casi cualquier tarea repetitiva en tu servidor.\n","date":"2025-10-21T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/automatizar-tareas-bash-cron/","title":"Automatiza tus tareas con Bash y Cron"},{"content":"Buenas pr√°cticas al publicar un blog t√©cnico: seguridad, SEO y mantenimiento Mantener un blog profesional requiere atenci√≥n a seguridad, optimizaci√≥n y mantenimiento.\nSeguridad Actualiza Hugo y dependencias Usa HTTPS y certificados v√°lidos Protege accesos con contrase√±as seguras SEO Meta tags completos y descriptivos URLs limpias y slug amigable Sitemap y robots.txt Mantenimiento Backups regulares Monitorizaci√≥n del servidor Revisi√≥n peri√≥dica de enlaces rotos Siguiendo estas buenas pr√°cticas, tu blog ser√° seguro, r√°pido y f√°cil de mantener.\n","date":"2025-10-21T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/buenas-practicas-blog-tecnico/","title":"Buenas pr√°cticas al publicar un blog t√©cnico: seguridad, SEO y mantenimiento"},{"content":"Gu√≠a pr√°ctica de hardening en Linux El hardening (o endurecimiento del sistema) es el proceso de reducir la superficie de ataque de un servidor, minimizando las vulnerabilidades y mejorando su resistencia frente a amenazas.\nEn esta gu√≠a aprender√°s, paso a paso, c√≥mo aplicar buenas pr√°cticas de seguridad en tu servidor Linux, desde la gesti√≥n de usuarios hasta la protecci√≥n de servicios y registros del sistema.\nMant√©n tu sistema actualizado Un sistema desactualizado es uno de los principales vectores de ataque. Las actualizaciones corrigen vulnerabilidades conocidas, por lo que mantener tu distribuci√≥n al d√≠a debe ser una prioridad.\n1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Adem√°s, puedes habilitar actualizaciones autom√°ticas para paquetes cr√≠ticos:\n1 2 sudo apt install unattended-upgrades sudo dpkg-reconfigure --priority=low unattended-upgrades Esto garantizar√° que tu sistema reciba parches de seguridad incluso si olvidas actualizarlos manualmente.\nGesti√≥n segura de usuarios y permisos Controlar qui√©n puede acceder al sistema es esencial. Algunas recomendaciones:\nDeshabilita o elimina cuentas innecesarias:\nCada cuenta es un posible punto de entrada. Usa sudo deluser o sudo usermod -L usuario para desactivarlas.\nEvita el uso del usuario root:\nTrabaja con una cuenta est√°ndar y usa sudo para tareas administrativas.\n1 2 sudo adduser admin sudo usermod -aG sudo admin Usa contrase√±as fuertes o autenticaci√≥n multifactor:\nAp√≥yate en herramientas como pam_cracklib o libpam-pwquality para reforzar pol√≠ticas de contrase√±as.\nRevisa permisos de archivos cr√≠ticos:\n1 2 sudo chmod 600 /etc/shadow sudo chmod 644 /etc/passwd Configura un SSH seguro SSH es la puerta de entrada m√°s usada a los servidores Linux, por lo que merece especial atenci√≥n.\nEdita el archivo de configuraci√≥n:\n1 sudo nano /etc/ssh/sshd_config Y aplica las siguientes medidas:\nCambia el puerto por defecto (por ejemplo, al 2222): 1 Port 2222 Desactiva el login directo de root: 1 PermitRootLogin no Usa autenticaci√≥n con clave p√∫blica: 1 PasswordAuthentication no Habilita solo los protocolos seguros: 1 Protocol 2 Finalmente, reinicia el servicio:\n1 sudo systemctl restart ssh Firewall y servicios Un firewall bien configurado es la primera l√≠nea de defensa frente a accesos no deseados.\nEn Ubuntu y derivados, UFW (Uncomplicated Firewall) simplifica esta tarea:\n1 2 3 4 5 sudo ufw enable sudo ufw allow 22/tcp sudo ufw allow 80/tcp sudo ufw allow 443/tcp sudo ufw status Adem√°s:\nDesactiva servicios innecesarios: 1 2 sudo systemctl disable nombre_servicio sudo systemctl stop nombre_servicio Lista los servicios activos: 1 2 sudo ss -tuln sudo systemctl list-unit-files --type=service Cuantos menos servicios en ejecuci√≥n, menor ser√° la superficie de ataque.\nMonitoreo y registros Un servidor seguro no solo se protege, tambi√©n se vigila.\nConfigura herramientas que te alerten ante comportamientos sospechosos.\nFail2ban: bloquea IPs que realizan intentos de acceso fallidos repetidos.\n1 2 sudo apt install fail2ban sudo systemctl enable fail2ban Auditd: registra eventos importantes del sistema.\n1 2 sudo apt install auditd sudo systemctl enable auditd Puedes revisar los logs con:\n1 sudo aureport -a Revisi√≥n peri√≥dica de logs: Los archivos m√°s relevantes se encuentran en /var/log/:\n1 2 3 /var/log/auth.log /var/log/syslog /var/log/fail2ban.log Analizar estos registros te permitir√° detectar patrones de ataque o configuraciones inseguras.\nMedidas adicionales de hardening Si quieres ir un paso m√°s all√°:\nInstala AppArmor o SELinux para control de acceso obligatorio (MAC). Configura logs remotos o alertas por correo. Implementa copias de seguridad cifradas y regulares. Usa integridad de archivos con herramientas como AIDE o Tripwire. Conclusi√≥n El hardening en Linux no es una acci√≥n puntual, sino un proceso continuo.\nAplicar las pr√°cticas b√°sicas que hemos visto ‚Äîmantener el sistema actualizado, controlar usuarios, asegurar SSH, configurar un firewall y monitorizar los registros‚Äî puede marcar la diferencia entre un servidor seguro y uno vulnerable.\nDedicar tiempo a reforzar la seguridad desde el principio te ahorrar√° muchos problemas en el futuro.\nüí° Recuerda: la mejor defensa es la prevenci√≥n.\n","date":"2025-10-20T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/hardening-linux/","title":"Gu√≠a pr√°ctica de hardening en Linux"},{"content":"Introducci√≥n a SvelteKit: crea tu primer proyecto SvelteKit es un framework moderno para construir aplicaciones web r√°pidas y optimizadas.\nInstala Node.js 1 2 node -v npm -v Crea un nuevo proyecto 1 2 3 4 npm create svelte@latest my-app cd my-app npm install npm run dev Estructura del proyecto /src/routes ‚Üí define p√°ginas /src/lib ‚Üí componentes reutilizables /static ‚Üí assets Primer componente 1 2 3 4 5 \u0026lt;script\u0026gt; let nombre = \u0026#39;David\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt;Hola {nombre}, bienvenido a SvelteKit!\u0026lt;/h1\u0026gt; ¬°Listo! Ahora tienes tu primer proyecto corriendo localmente.\n","date":"2025-10-20T00:00:00Z","permalink":"https://dev.davidalvarezp.com/p/sveltekit-introduccion/","title":"Introducci√≥n a SvelteKit: crea tu primer proyecto"}]